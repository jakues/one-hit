#!/bin/bash

# Description	: Topping for qlauncher.
# Author		: Rill (jakueenak@gmail.com)
# Telegram		: t.me/pethot
# Version		: beta

ECMD="echo -e"
COLOUR_RESET='\e[0m'
aCOLOUR=(
		'\e[1;33m'	# Yellow
		'\e[1m'		# White
		'\e[1;32m'	# Green
		'\e[1;31m'  	# Red
	)
	GREEN_LINE="${aCOLOUR[0]}──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────$COLOUR_RESET"
	GREEN_BULLET="${aCOLOUR[2]}		[+]	$COLOUR_RESET"
	GREEN_WARN="${aCOLOUR[2]}		[!] $COLOUR_RESET"
	RED_WARN="${aCOLOUR[3]}		[!] $COLOUR_RESET"

DIRQL="/etc/ql"
QLS="$DIRQL/qlauncher.sh"

################
## check root ##
################

if [[ $(id -u) -ne 0 ]] ; then
	$ECMD "\n$RED_WARN${aCOLOUR[3]}Please run as root $COLOUR_RESET\n" ; exit 1
fi

help() {
	$ECMD "\n Usage: Q [OPTION]...\n"
	$ECMD "  Main Usage :"
	$ECMD "    -s, --start		start Qlauncher service"
	$ECMD "    -c, --stop		stop Qlauncher service"
	$ECMD "    -r, --restart	restart Qlauncher service"
	$ECMD "    -i, --check		check Qlauncher tick"
	$ECMD "    -l, --stat		show status container"
	$ECMD "    -b, --bind		get Qlauncher QR Code"
	$ECMD "\n  Miscellaneous :"
	$ECMD "    -P			check port status based nmap"
	$ECMD "    -p, --port		check port status based on query-api"
	$ECMD "    -d, --rem		remove 'Exited' container"
	$ECMD "    -j, --cpu		show total cpu usage"
	$ECMD "    -up, --update	update script"
	$ECMD "    -n, --hostname	change hostname"
	$ECMD "    -fp, --fpull	pull qlauncher images"
	$ECMD "    -w, --about		see magic\n"
	$ECMD "  Report this script to: <https://github.com/jakues/one-hit/issues>"
	$ECMD "  Report Qlauncher bugs to: <https://github.com/poseidon-network/qlauncher-linux/issues>"
	$ECMD "  Qlauncher github: <https://github.com/poseidon-network/qlauncher-linux>"
	$ECMD "  Poseidon Network home page: <https://poseidon.network/>\n"
	}

null() {
	$ECMD "\nUsage: Q [OPTION]...\n"
	$ECMD "Try 'Q --help' for more information.\n"
	}

################
## main usage ##
################

check() { $ECMD ; $QLS check | cut -c 2-26 ; $QLS check | cut -c 28-68 ; $QLS check | cut -c 70-96 ; $QLS check | cut -c 98-120 ; $QLS check | cut -c 122-144 ; $QLS check | cut -c 146-168 ; $ECMD ; }

status() { $ECMD ; docker ps -a --format "table {{.ID}}\t{{.Status}}\t{{.Names}}\t{{.Ports}}" | lolcat ; $ECMD ; }

bind() {
	$ECMD "\nBind your device with QQQ App" | lolcat
	$ECMD "NAS-QNAP-$(cat /etc/machine-id)" | tee /etc/qlauncher-qr | cut -b 45-
	qrencode -t ANSIUTF8 < "/etc/qlauncher-qr" ; $ECMD "\nFor more information open this URL on your browser : \n" | lolcat ; $QLS bind | cut -c 44-120 | lolcat ; $ECMD
	}

TRUE=$(check | grep '"edgecore_alive":"true"')
ECMN="echo -en"

start() {
	if [[ ! $TRUE ]] ; then
		$ECMD ${aCOLOUR[2]} ; $QLS start >/dev/null 2>&1 > /var/log/Q &
		$ECMN "		[+] Starting Qlauncher ...  "
      		PID=$!
      		delay=${SPINNER_DELAY:-0.25}
      		i=1
      		sp="/-\|"
		while [ -d /proc/$PID ] ; do
		  printf "\b${sp:i++%${#sp}:1}"
		  sleep $delay
		done
		$ECMD "\n$GREEN_WARN${aCOLOUR[2]}OK" ; $ECMD ${aCOLOUR[0]}
		read -p "		[?] Are you want to check it ? [y/N]" -n 1 -r
		$ECMD "$COLOUR_RESET"
			if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
				$ECMD "$COLOUR_RESET" ; exit 1
			else
				$ECMD ; check | lolcat ; $ECMD
			fi
	else
		$ECMD "\n$RED_WARN${aCOLOUR[3]}Qlauncher Already Running $COLOUR_RESET\n" ; exit 1
	fi
	}

stop() {
	if [[ $TRUE ]] ; then
		$ECMD ${aCOLOUR[0]} ; $QLS stop >/dev/null 2>&1 > /var/log/Q &
		$ECMN "		[+] Stopping Qlauncher ...  "
		PID=$!
		delay=${SPINNER_DELAY:-0.25}
		i=1
		sp="/-\|"
		while [ -d /proc/$PID ] ; do
			printf "\b${sp:i++%${#sp}:1}"
			sleep $delay
		done
		$ECMD "\n$GREEN_WARN${aCOLOUR[2]}OK" ; $ECMD ${aCOLOUR[0]}
		read -p "		[?] Are you want to check it ? [y/N]" -n 1 -r
		$ECMD "$COLOUR_RESET"
			if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
				$ECMD "$COLOUR_RESET" ; exit 1
			else
				$ECMD "		[+] $(check | grep "edgecore_alive" )\n" | lolcat
			fi
	else
		$ECMD "\n$RED_WARN${aCOLOUR[3]}Qlauncher Not Running $COLOUR_RESET\n" ; exit 1
	fi
	}

restart() {
		$ECMD ${aCOLOUR[0]} ; $QLS restart >/dev/null 2>&1 > /var/log/Q &
		$ECMN "		[+] Restarting Qlauncher ...  "
		PID=$!
		delay=${SPINNER_DELAY:-0.25}
		i=1
		sp="/-\|"
			while [ -d /proc/$PID ] ; do
				printf "\b${sp:i++%${#sp}:1}"
				sleep $delay
			done
				$ECMD "\n$GREEN_WARN${aCOLOUR[2]}OK" ; $ECMD ${aCOLOUR[0]}
				read -p "		[?] Are you want to check it ? [y/N]" -n 1 -r
				$ECMD "$COLOUR_RESET"
		if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
			$ECMD "\n $COLOUR_RESET" ; exit 1
		else
			$ECMD ; status | grep "Exited" | lolcat ; $ECMD
		fi
	}

#################
##Miscellaneous##
#################

MYIP=$(wget -t 3 -T 15 -qO- http://ipv4.icanhazip.com)

port() { $ECMD ; nmap -p 443,32440-32449 $MYIP | lolcat ; $ECMD ; }

HWSN=$(cat /etc/qlauncher)
URL=https://edms.poseidon.network/qlauncher/${HWSN}/
CC=close
CO=open

port_api() {	
	curl -s ${URL} | tee /etc/qlauncher-query >/dev/null
	
	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=is_enabled": ).*(?=, "port": 443)')" == *"true"* ]] ; then
        	$ECMD "\n${aCOLOUR[2]} nginx/443          : ${CO}$COLOUR_RESET"
	else
        	$ECMD "\n${aCOLOUR[3]} nginx/443          : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=ipfs", "is_enabled": ).*(?=, "port": 32440)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} ipfs/32440         : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} ipfs/32440         : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=ipfs-gateway", "is_enabled": ).*(?=, "port": 32441)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} ipfs-gateway/32441 : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} ipfs-gateway/32441 : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=sysinfo", "is_enabled": ).*(?=, "port": 32442)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} sysinfo/32442      : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} sysinfo/32442      : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=v2ray", "is_enabled": ).*(?=, "port": 32443)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} v2ray/32443        : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} v2ray/32443        : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=ipfs-swarm", "is_enabled": ).*(?=, "port": 32445)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} ipfs-swarm/32445   : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} ipfs-swarm/32445   : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=nginx", "is_enabled": ).*(?=, "port": 32446)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} nginx/32446        : ${CO}$COLOUR_RESET"
	else
        	$ECMD "${aCOLOUR[3]} nginx/32446        : ${CC}$COLOUR_RESET"
	fi

	if [[ "$(cat /etc/qlauncher-query | grep -Poe '(?<=transcoding", "is_enabled": ).*(?=, "port": 32449)')" == *"true"* ]] ; then
        	$ECMD "${aCOLOUR[2]} transcoding/32449  : ${CO}$COLOUR_RESET\n"
	else
        	$ECMD "${aCOLOUR[3]} transcoding/32449  : ${CC}$COLOUR_RESET\n"
	fi
	}

do_port_api() {
	$ECMD "\nStarting port check at $(date -u)" | lolcat
	$ECMD "For device : ${HWSN}" | lolcat
	$ECMD "Public ip  : ${MYIP}" | lolcat
	read up rest </proc/uptime; t1="${up%.*}${up#*.}"
	port_api
	read up rest </proc/uptime; t2="${up%.*}${up#*.}"
	MS=$(( 10*(t2-t1) ))
	$ECMD "Port check done in ${MS} ms.\n" | lolcat
	}

rem() {
	if docker ps -a | grep Exited ; then
		$ECMD ${aCOLOUR[0]}
		read -p "Are you want to remove 'Exited' container ? [y/N]" -n 1 -r
		$ECMD "$COLOUR_RESET"
			if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
				exit 1
			else
				clear ; $ECMD ${aCOLOUR[0]} "\n Removing 'Exited' Container ...\n" ; sleep 1 ; docker container prune
				read -p "		[?] Are you want to check it ? [y/N]" -n 1 -r
				$ECMD "$COLOUR_RESET"
					if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
						$ECMD "\n $COLOUR_RESET" ; exit 1
					else
						$ECMD "\n" ; status | lolcat
					fi
			fi
	else
		$ECMD $RED_WARN"${aCOLOUR[3]} No container 'Exited' or Qlauncher not running$COLOUR_RESET\n" ; exit 1
		$ECMD ${aCOLOUR[0]}
		read -p "		[?] Are you want to check it ? [y/N]" -n 1 -r
			if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
				$ECMD "\n $COLOUR_RESET" ; exit 1
			else
				$ECMD "\n" ; check | lolcat
			fi
	fi
	}

cpu_usage() {
	$ECMD "${aCOLOUR[2]}\nTotal CPU Usage\n"
	awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) "%"; }' \
	<(grep 'cpu ' /proc/stat) <(sleep 1;grep 'cpu ' /proc/stat)
	$ECMD "$COLOUR_RESET"
	}

update() {
	RPM=$(which yum)
	APT=$(which apt-get)
		if [[ ! -z $RPM ]]; then
			yum update -y ; yum upgrade -y ; yum install epel-release wget net-tools qrencode ruby nmap dmidecode unzip -y
		elif [[ ! -z $APT ]]; then
    			apt-get update -qq -y ; apt-get upgrade -qq -y ; apt-get install wget net-tools qrencode nmap dmidecode lolcat -qq -y
		else
    			exit 1
		fi
	ln -s /usr/games/lolcat /usr/bin/lolcat ; ln -s /usr/games/lolcat /usr/local/bin/lolcat ; ln -s /usr/bin/Q /usr/local/bin/Q
	wget -O /usr/bin/Q https://git.io/JUxnc ; chmod +x /usr/bin/Q ; cat /etc/machine-id | tee /etc/qlauncher ; $ECMD "NAS-QNAP-${HWSN}" | tee /etc/qlauncher-qr | cut -b 45-
	}

do_update() {
		$ECMD ${aCOLOUR[0]} ; update >/dev/null 2>&1 > /var/log/Q &
		$ECMN "	[+] Updating Script ...  "
		PID=$!
		delay=${SPINNER_DELAY:-0.25}
		i=1
		sp="/-\|"
			while [ -d /proc/$PID ] ; do
				printf "\b${sp:i++%${#sp}:1}"
				sleep $delay
			done
		$ECMD "\n$GREEN_WARN${aCOLOUR[2]}OK" ; $ECMD ${aCOLOUR[0]} ; sleep 5 ; clear ; about
	}

hostname() {
	$ECMD "${aCOLOUR[0]}		[+] The current hostname is : ${aCOLOUR[2]}$CUR_HOSTNAME\n${aCOLOUR[0]}"
	read -r -p "		[+] Enter new hostname : " NEW_HOSTNAME
	$ECMD "${aCOLOUR[0]}"
	CUR_HOSTNAME=$(cat /etc/hostname)
	hostnamectl set-hostname "${NEW_HOSTNAME}"
	sudo sed -i "s/$CUR_HOSTNAME/$NEW_HOSTNAME/g" /etc/hosts
	sudo sed -i "s/$CUR_HOSTNAME/$NEW_HOSTNAME/g" /etc/hostname
	read -p "		[+] Reboot now ? [y/N]" -n 1 -r
		if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
			$ECMD "\n $COLOUR_RESET" ; exit 1
		else
			$ECMD "$COLOUR_RESET" ; reboot
		fi
	}

change_hwsn() {
	$ECMD ${aCOLOUR[0]}
	CUR_HWSN=$(cat /etc/machine-id)
	$ECMD "${aCOLOUR[0]}		[+] The current hwsn is : ${aCOLOUR[2]}$CUR_HWSN${aCOLOUR[0]}"
	read -r -p "		[+] Enter new hwsn : " SN
    	echo $SN > /etc/qlauncher ; echo $SN > /etc/machine-id ; restart
	}

pull_requirements() {
	MODELO=$(uname -m)
	if [[ "${MODELO}" == *"x86_64"* ]] ; then
		docker pull -q docker-registry.poseidon.network/qlauncher-sysinfo-updater:0.5.0
		docker pull -q docker-registry.poseidon.network/qservice-transcoding-x86:0.1.0
		docker pull -q docker-registry.poseidon.network/qservice-nginx-x86:0.2.4
		docker pull -q docker-registry.poseidon.network/qservice-v2ray:0.0.4
		docker pull -q ipfs/go-ipfs:v0.4.23
		docker pull -q kubeedge/pause:3.1
	elif [[ "${MODELO}" == *"armv7l"* ]] ; then
		docker pull -q docker-registry.poseidon.network/qlauncher-sysinfo-updater-arm:0.3.3
		docker pull -q docker-registry.poseidon.network/qservice-transcoding-arm:0.1.0
		docker pull -q docker-registry.poseidon.network/qservice-nginx-arm:0.2.4
		docker pull -q docker-registry.poseidon.network/qservice-v2ray-arm:0.0.4
		docker pull -q yrzr/go-ipfs-arm32v7:v0.4.23
		docker pull -q kubeedge/pause-arm:3.1
	elif [[ "${MODELO}" == *"aarch64"* ]] ; then
		$ECMD "$RED_WARN${aCOLOUR[3]}Currently Qlauncher doesn't support arm64.$COLOUR_RESET"
	fi
	}

force_pull() {
		$ECMD ${aCOLOUR[0]} ; pull_requirements >/dev/null 2>&1 > /var/log/Q &
		$ECMN "		[+] Pulling images from docker hub ...  "
		PID=$!
		delay=${SPINNER_DELAY:-0.25}
		i=1
		sp="/-\|"
			while [ -d /proc/$PID ] ; do
				printf "\b${sp:i++%${#sp}:1}"
				sleep $delay
			done
				$ECMD "\n$GREEN_WARN${aCOLOUR[2]}OK" ; $ECMD ${aCOLOUR[0]}
				read -p "		[+] Check docker image now ? [y/N]" -n 1 -r
				$ECMD "$COLOUR_RESET"
		if [[ ! $REPLY =~ ^[Yy]$ ]] ; then
			$ECMD "\n $COLOUR_RESET" ; exit 1
		else
			$ECMD ; docker image ls | lolcat ; $ECMD
		fi
	}

about() {
	$ECMD "\n\033[1;36m@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\033[1;37m"
	$ECMD "\033[1;36m@@\033[1;37mScript Auto Install Qlauncher-Lelenux\033[1;36m@@\033[1;37m"
	$ECMD "\033[1;36m@@\033[1;37m	Original Script by Jakues™\033[1;36m     @@\033[1;37m"
	$ECMD "\033[1;36m@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\033[1;37m"
	$ECMD "\nYou can donate me to address below\n\n"
	$ECMD "\n\033[1;32mBTC:		bc1q8lshj8wxmf3cegvqc5atefy8q8pylmar5swxph\033[0;37m\n"
	$ECMD "\n\033[1;32mERC20:		0x50D232369c7A4A77055ed129ee653bE18DFd78ab\033[0;37m\n"
	$ECMD "\n\033[1;32mBNB:		bnb1v7np68j0mh4xg53rhyrze7shfkgj4tt8psyggk\033[0;37m\n"
	$ECMD "\n\033[1;32mTRC20:		TQLcDqU7SC7PCdUtL5JmyTEzZx6Cq5tmdg\033[0;37m\n"
	$ECMD
	}

#################
###Buster Call###
#################

case "$1" in
 -s|--start)
start
;;
 -c|--stop)
stop
;;
 -r|--restart)
restart
;;
 -i|--check)
check | lolcat
;;
 -l|--stat)
status
;;
 -b|--bind)
bind
;;
 -P)
port
;;
 -p|--port)
do_port_api
;;
 -d|--rem)
rem
;;
 -up|--update)
do_update
;;
 -j|--cpu)
cpu_usage
;;
 -n|--hostname)
hostname
;;
 -sn|--sn)
change_hwsn
;;
 -fp|--fpull)
force_pull
;;
 -w|--about)
about
;;
 --help)
help | lolcat
;;
 *)
null | lolcat
;;
esac
